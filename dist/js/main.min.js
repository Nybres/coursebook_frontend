"use strict";addEventListener("DOMContentLoaded",function(e){function n(e){e.classList.add("overlay--active"),document.body.classList.add("no-scroll")}var t,o,r,c,a=!1,i=document.querySelectorAll(".alert"),s=(i&&i.forEach(function(e){setTimeout(function(){e.classList.add("alert__hide")},2e3)}),document.querySelector(".drawer")),d=(s&&(t=document.querySelector(".overlay"),i=document.querySelector(".jsAccountAdd"),o=s.querySelector(".drawer__back"),i.addEventListener("click",function(){s.classList.add("drawer--active"),n(t),a=!1}),o.addEventListener("click",function(){s.classList.remove("drawer--active"),t.classList.remove("overlay--active"),document.body.classList.remove("no-scroll")})),document.querySelector(".nav")),l=(d&&window.addEventListener("scroll",function(){148<window.scrollY?d.classList.add("nav--shadow"):d.classList.remove("nav--shadow")}),document.querySelector(".jsCourseForm")),u=(l&&l.addEventListener("submit",function(e){e.preventDefault();var r=new FormData(l),e=(l.querySelectorAll('input[type="file"]').forEach(function(e){for(var t=e.files,n=0;n<t.length;n++){var o=t[n];r.append("uploaded_images",o)}}),r.get("csrfmiddlewaretoken"));fetch("/account-courses",{method:"POST",headers:{"X-CSRFToken":e},body:r}).then(function(e){console.log(e),e.ok,location.reload()}).catch(function(e){console.log(e)})}),document.querySelector(".jsInstructorForm")),i=(document.querySelectorAll(".jsInstructorEdit").forEach(function(t){t.addEventListener("click",function(e){a=!0,r=t.dataset.id,fetch("/edit-instructor/"+r,{method:"GET"}).then(function(e){return e.json()}).then(function(e){var t=document.querySelector(".overlay");n(t),s.classList.add("drawer--active"),u.querySelector("[name='first_name']").value=e.first_name,u.querySelector("[name='last_name']").value=e.last_name,u.querySelector("[name='description']").value=e.description,e.photo&&(u.querySelector(".photo-preview").src=e.photo_thumb)})})}),u&&u.addEventListener("submit",function(e){e.preventDefault();var e=new FormData(u),t=e.get("csrfmiddlewaretoken");fetch(a?"/edit-instructor/"+r:"/account-instructors",{method:a?"PUT":"POST",headers:{"X-CSRFToken":t},body:e}).then(function(e){u.reset(),console.log(e),e.ok,location.reload()}).catch(function(e){console.log(e)})}),document.querySelector(".jsAddImage"));i&&(c=document.querySelector(".form__images"),i.addEventListener("click",function(e){e.preventDefault();var r=document.createElement("input");r.classList.add("form__group-input"),r.type="file",r.name="images",r.addEventListener("change",function(e){var t,n,o,e=e.target.files[0];e&&(t=document.createElement("div"),n=document.createElement("div"),o=document.createElement("img"),t.classList.add("form__images-image"),n.classList.add("form__images-delete"),n.innerHTML='\n\t\t  <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24"\n\t\t  fill="none" stroke="white" stroke-width="2" stroke-linecap="round"\n\t\t  stroke-linejoin="round" class="feather feather-x">\n\t\t  <line x1="18" y1="6" x2="6" y2="18"></line>\n\t\t  <line x1="6" y1="6" x2="18" y2="18"></line>\n\t  \t\t</svg>\n\t  \t\t',o.width=150,o.height=150,o.loading="lazy",o.src="https://placehold.co/150x150?text=".concat(e.name),c.appendChild(t),t.appendChild(n),t.appendChild(o),t.insertBefore(r,t.lastChild),n.addEventListener("click",function(e){e.target.closest(".form__images-image").remove()}))}),r.click()}))});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
